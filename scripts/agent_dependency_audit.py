#!/usr/bin/env python3
"""
Agent Dependency Audit Script
==============================

–ê–Ω–∞–ª—ñ–∑—É—î –∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ HoloMisha.
–í–∏—è–≤–ª—è—î:
- –¶–∏–∫–ª—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
- –ù–∞–¥–º—ñ—Ä–Ω—ñ –∑–≤‚Äô—è–∑–∫–∏
- –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—ñ

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python scripts/agent_dependency_audit.py
"""

import os
import ast
import json
from collections import defaultdict, deque
from typing import Dict, List, Set

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
SRC_DIR = os.path.join(PROJECT_ROOT, "src")
EXCLUDE_DIRS = {"__pycache__", "tests", "docs", "examples", "web_demo", "monitoring", "scripts"}
AGENT_KEYWORDS = ["agent", "engine", "orchestrator", "trainer", "analyzer"]

# --- –§—É–Ω–∫—Ü—ñ—ó ---
def find_python_files(root_dir: str) -> List[str]:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —É—Å—ñ .py —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –∫—Ä—ñ–º –≤–∏–∫–ª—é—á–µ–Ω—å."""
    py_files = []
    for root, dirs, files in os.walk(root_dir):
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        for file in files:
            if file.endswith(".py"):
                py_files.append(os.path.join(root, file))
    return py_files

def extract_imports(file_path: str) -> Set[str]:
    """–í–∏—Ç—è–≥—É—î —ñ–º–ø–æ—Ä—Ç–∏ –∑ Python-—Ñ–∞–π–ª—É."""
    with open(file_path, "r", encoding="utf-8") as f:
        try:
            tree = ast.parse(f.read(), filename=file_path)
        except SyntaxError:
            print(f"[!] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –≤ {file_path}")
            return set()

    imports = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports.add(alias.name)
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                imports.add(node.module)
    return imports

def is_agent_module(module_name: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –º–æ–¥—É–ª—å –∞–≥–µ–Ω—Ç–æ–º."""
    return any(keyword in module_name.lower() for keyword in AGENT_KEYWORDS)

def build_dependency_graph(py_files: List[str]) -> Dict[str, Set[str]]:
    """–ë—É–¥—É—î –≥—Ä–∞—Ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏."""
    graph = defaultdict(set)
    module_map = {}  # module_name -> file_path

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –º–æ–¥—É–ª—ñ–≤
    for file in py_files:
        rel_path = os.path.relpath(file, PROJECT_ROOT)
        module_name = rel_path.replace("/", ".").replace("\\", ".").replace(".py", "")
        module_map[module_name] = file

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏
    for file in py_files:
        rel_path = os.path.relpath(file, PROJECT_ROOT)
        module_name = rel_path.replace("/", ".").replace("\\", ".").replace(".py", "")
        imports = extract_imports(file)

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –∞–≥–µ–Ω—Ç–∏
        if not is_agent_module(module_name):
            continue

        for imp in imports:
            if imp in module_map and is_agent_module(imp):
                graph[module_name].add(imp)

    return graph

def find_cycles(graph: Dict[str, Set[str]]) -> List[List[str]]:
    """–®—É–∫–∞—î —Ü–∏–∫–ª—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤ –≥—Ä–∞—Ñ—ñ."""
    cycles = []
    visited = set()
    rec_stack = set()

    def dfs(node: str, path: List[str]):
        if node in rec_stack:
            cycle_start = path.index(node)
            cycles.append(path[cycle_start:] + [node])
            return
        if node in visited:
            return

        visited.add(node)
        rec_stack.add(node)
        path.append(node)

        for neighbor in graph.get(node, []):
            dfs(neighbor, path)

        path.pop()
        rec_stack.remove(node)

    for node in graph:
        if node not in visited:
            dfs(node, [])

    return cycles

def print_report(graph: Dict[str, Set[str]], cycles: List[List[str]]):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ."""
    print("\n=== üß† –ê—É–¥–∏—Ç –∑–≤‚Äô—è–∑–∫—ñ–≤ –º—ñ–∂ –∞–≥–µ–Ω—Ç–∞–º–∏ ===\n")

    print("üîó –£—Å—ñ –∑–≤‚Äô—è–∑–∫–∏:")
    for module, deps in graph.items():
        if deps:
            print(f"  {module}")
            for dep in deps:
                print(f"    ‚Üí {dep}")

    if cycles:
        print("\nüåÄ –¶–∏–∫–ª—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        for cycle in cycles:
            print("  ‚Üí ".join(cycle))
    else:
        print("\n‚úÖ –ù–µ–º–∞—î —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π!")

    print("\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ú–æ–¥—É–ª—ñ–≤: {len(graph)}")
    print(f"  –ó–≤‚Äô—è–∑–∫—ñ–≤: {sum(len(deps) for deps in graph.values())}")
    print(f"  –¶–∏–∫–ª—ñ–≤: {len(cycles)}")

    # –Ø–∫—â–æ —î —Ü–∏–∫–ª–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    if cycles:
        print("\n‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ —Ü–∏–∫–ª—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ! CI –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
        exit(1)
    else:
        print("\n‚úÖ –ù–µ–º–∞—î —Ü–∏–∫–ª—ñ–≤. –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ —á–∏—Å—Ç–∞!")

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
if __name__ == "__main__":
    print("üîç –ü–æ—á–∏–Ω–∞—é –∞—É–¥–∏—Ç –∑–≤‚Äô—è–∑–∫—ñ–≤ –º—ñ–∂ –∞–≥–µ–Ω—Ç–∞–º–∏...")
    py_files = find_python_files(SRC_DIR)
    graph = build_dependency_graph(py_files)
    cycles = find_cycles(graph)
    print_report(graph, cycles)